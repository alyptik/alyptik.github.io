<!DOCTYPE HTML PUBLIC "-//W3O//DTD W3 HTML 2.0//EN">
<!-- This collection of hypertext pages is Copyright 1995-2005 by Steve Summit. -->
<!-- Content from the book "C Programming FAQs: Frequently Asked Questions" -->
<!-- (Addison-Wesley, 1995, ISBN 0-201-84519-9) is made available here by -->
<!-- permission of the author and the publisher as a service to the community. -->
<!-- It is intended to complement the use of the published text -->
<!-- and is protected by international copyright laws. -->
<!-- The on-line content may be accessed freely for personal use -->
<!-- but may not be published or retransmitted without explicit permission. -->
<!-- -->
<!-- this page built Sat Dec 24 21:47:46 2005 by faqproc version 2.7 -->
<!-- from source file strangeprob.sgml dated Tue Jun 29 21:44:40 2004 -->
<!-- corresponding to FAQ list version 4.0 -->
<html>
<head>
<base href="http://c-faq.com/strangeprob/index.html">
<meta name=GENERATOR content="faqproc">
<title>Strange Problems</title>
</head>
<body bgcolor="#ffffff">
<H1>16. Strange Problems</H1>
<a name="emptyloop">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/emptyloop.html"><!-- qtag -->Question 16.1</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
Why is this loop always executing once?
<pre>
	for(i = start; i &lt; end; i++);
		{
		printf("%d\n", i);
		}
</pre>
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>
The accidental extra semicolon
hiding at the end of the line containing the <TT>for</TT>
constitutes a null statement which is,
as far as the compiler is concerned,
the loop body.
The following brace-enclosed block,
which you thought
(and the indentation suggests)
was a loop body,



is actually the next
statement,
and
it
is traversed
exactly
once,
regardless of the number of loop iterations.
</p><p>See also question <a href="/~scs/cgi-bin/faqcat.cgi?sec=struct#retcrash">2.18</a>.

</p>
<p>References:

CT&amp;P Sec. 2.3 pp. 20-21
<hr><hr><hr>
<a name="unclosed">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/unclosed.html"><!-- qtag -->Question 16.1b</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
I'm getting baffling syntax errors which make no sense at all,
and it seems like large chunks of my program aren't being compiled.
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>
Check for unclosed comments,
mismatched
<TT>#if</TT>/<TT>#ifdef</TT>/<TT>#ifndef</TT>/<TT>#else</TT>/<TT>#endif</TT>
directives,
and perhaps unclosed quotes;
remember to check header files, too.
(See also questions
<a href="/~scs/cgi-bin/faqcat.cgi?sec=struct#retcrash">2.18</a>,
<a href="/~scs/cgi-bin/faqcat.cgi?sec=cpp#headerglom">10.9</a>,
and
<a href="/~scs/cgi-bin/faqcat.cgi?sec=ansi#preansi">11.29a</a>.)
<hr><hr><hr>
<a name="procedure">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/procedure.html"><!-- qtag -->Question 16.1c</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
Why isn't my procedure call working?
The compiler seems to skip right over it.
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>
Does the code look like this?
<pre>
	myprocedure;
</pre>

C has only
functions,
and
function
calls always require parenthesized argument
lists,
even if empty.
Use
<pre>
	myprocedure();
</pre>
Without the parentheses,
the reference to the function name simply generates
a pointer to the function,

which is then discarded.

<hr><hr><hr>
<a name="headerglom">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/headerglom.html"><!-- qtag -->Question 16.2</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
I'm getting strange
syntax errors
on the very first
declaration in
a file,
but it looks fine.

</p>
<p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>
See question <a href="/~scs/cgi-bin/faqcat.cgi?sec=cpp#headerglom">10.9</a>.
<hr><hr><hr>
<a name="biglocal">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/biglocal.html"><!-- qtag -->Question 16.3</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
This program crashes before it even runs!
(When single-stepping with a debugger, it dies before the first
statement in <TT>main</TT>.)
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>
You probably have one or more very large
(kilobyte or more)
local arrays.
Many
systems have fixed-size stacks,
and even those which perform dynamic stack allocation automatically
(e.g.&nbsp;Unix)
can be confused when the stack tries to grow by a huge chunk
all at once.
It is often better to declare large arrays with <TT>static</TT> duration
(unless of course you need a fresh set with each recursive call,



in which case you could dynamically allocate them with <TT>malloc</TT>;
see also question <a href="/~scs/cgi-bin/faqcat.cgi?sec=decl#autoaggrinit">1.31</a>).
</p><p>Other possibilities
are
that your program has been linked incorrectly
(combining object modules compiled with different
compilation
options,
or using improper dynamic libraries),
or
that run-time dynamic library linking
is failing for some reason,



or that you have somehow
misdeclared <TT>main</TT>.
</p><p>See also questions
<a href="/~scs/cgi-bin/faqcat.cgi?sec=ansi#voidmain">11.12b</a>,
<a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#crashatexit">16.4</a>,
<a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#funnybugs">16.5</a>,
and
<a href="/~scs/cgi-bin/faqcat.cgi?sec=resources#lint1">18.4</a>.
<hr><hr><hr>
<a name="crashatexit">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/crashatexit.html"><!-- qtag -->Question 16.4</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
I have a program that seems to run correctly,
but
it
crashes as it's exiting,
<em>after</em>
the last statement in <TT>main()</TT>.
What could be causing this?
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>
There are at least three things to look for:
<OL><li>If a semicolon in a previous declaration is missing,
<TT>main</TT>
might be inadvertently declared as returning a structure,
conflicting with the run-time startup code's
expectations.
See
questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=struct#retcrash">2.18</a>,
<a href="/~scs/cgi-bin/faqcat.cgi?sec=cpp#headerglom">10.9</a>,
<a href="/~scs/cgi-bin/faqcat.cgi?sec=ansi#voidmain">11.12b</a>,
and <a href="/~scs/cgi-bin/faqcat.cgi?sec=ansi#voidmain3">11.14a</a>.
<li>If
<TT>setbuf</TT> or <TT>setvbuf</TT>
is called,
and if the supplied buffer
is an automatic, local variable of <TT>main</TT>
(or any function),
the buffer may not exist any more
by the time the stdio
library tries to perform
its final
cleanup.
<li>A
cleanup function
registered by <TT>atexit</TT>
may have an error.
Perhaps <em>it</em> is
trying to reference data
local to <TT>main</TT>
or to some other function
which no longer exists.
</OL>(The second and third problems

are actually closely related to 
question <a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#retaggr">7.5a</a>;
see
also question
<a href="/~scs/cgi-bin/faqcat.cgi?sec=ansi#exitvsreturn">11.16</a>.)
</p>
<p>References:

CT&amp;P Sec. 5.3 pp. 72-3
<hr><hr><hr>
<a name="funnybugs">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/funnybugs.html"><!-- qtag -->Question 16.5</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
This program runs perfectly on
one machine,
but I get weird results on
another.
Stranger still,
adding or
removing a debugging printout
changes the symptoms...
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>
Lots of things could be going wrong;
here are a few of the more common things to check:
<UL><li>uninitialized local variables
<a href="stktrash.html" rel=subdocument>[footnote]</a>
(see also question <a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#malloc1">7.1</a>)
<li>integer overflow,
especially on 16-bit machines,
especially of an intermediate result when doing
things like <TT>a&nbsp;*&nbsp;b&nbsp;/&nbsp;c</TT>
(see also question <a href="/~scs/cgi-bin/faqcat.cgi?sec=expr#intoverflow1">3.14</a>)
<li>undefined evaluation order
(see questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=expr#evalorder1">3.1</a> through
<a href="/~scs/cgi-bin/faqcat.cgi?sec=expr#precvsooe">3.4</a>)
<li>omitted
declaration
of external functions,
especially 
those which
return
something
other than <TT>int</TT>,
or have ``narrow'' or variable arguments
(see questions
<a href="/~scs/cgi-bin/faqcat.cgi?sec=decl#implfdecl">1.25</a>,
<a href="/~scs/cgi-bin/faqcat.cgi?sec=ansi#argpromos">11.3</a>,
<a href="/~scs/cgi-bin/faqcat.cgi?sec=fp#fpdecl">14.2</a>,
and <a href="/~scs/cgi-bin/faqcat.cgi?sec=varargs#protos">15.1</a>)
<li>dereferenced

null pointers
(see section <a href="/~scs/cgi-bin/faqcat.cgi?sec=null#index">5</a>)
<li>improper <TT>malloc</TT>/<TT>free</TT> use:
assuming <TT>malloc</TT>'ed memory contains 0,
assuming <TT>free</TT>d storage persists,
<TT>free</TT>ing something twice,
corrupting the <TT>malloc</TT> arena
(see also questions
<a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#crash">7.19</a>
and
<a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#useafterfree">7.20</a>)
<li>pointer problems in general
(see also
questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#ptralign">16.7</a> and <a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#segv">16.8</a>)
<li>mismatch between
<TT>printf</TT> format
and arguments,
especially trying to print <TT>long&nbsp;int</TT>s using <TT>%d</TT>
(see
questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=stdio#printftypes">12.7</a> and <a href="/~scs/cgi-bin/faqcat.cgi?sec=stdio#scanfvsprintf">12.9</a>)
<li>
trying to
allocate



more memory than an <TT>unsigned&nbsp;int</TT> can count,
especially on machines with limited memory
(see also questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#sizewrap">7.16</a>
and <a href="/~scs/cgi-bin/faqcat.cgi?sec=osdep#bigdatastr">19.23</a>)
<li>array bounds problems,
especially of small, temporary
buffers,
perhaps used for constructing strings with <TT>sprintf</TT>
<a href="gonzo.html" rel=subdocument>[footnote]</a>
(see also
questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#malloc1">7.1</a>, <a href="/~scs/cgi-bin/faqcat.cgi?sec=stdio#sprintfsize">12.21</a>, and <a href="/~scs/cgi-bin/faqcat.cgi?sec=osdep#system2">19.28</a>)
<li>invalid assumptions about the mapping of <TT>typedef</TT>s,
especially <TT>size_t</TT>
(see question <a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#sizetlong">7.15</a>)
<li>floating point problems
(see questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=fp#printfprec">14.1</a> and <a href="/~scs/cgi-bin/faqcat.cgi?sec=fp#strangefp">14.4a</a>)
<li>


anything you thought was a clever exploitation
of the
way you believe code is generated for your
specific
system
</UL></p><p>Proper use of
function prototypes
can catch several of these problems;
<TT>lint</TT> would catch several more.
See also questions 
<a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#biglocal">16.3</a>,
<a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#crashatexit">16.4</a>,
and
<a href="/~scs/cgi-bin/faqcat.cgi?sec=resources#lint1">18.4</a>.
<hr><hr><hr>
<a name="strlitnomod">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/strlitnomod.html"><!-- qtag -->Question 16.6</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
Why does
this code:
<pre>
char&nbsp;*p&nbsp;=&nbsp;"hello,&nbsp;world!";
p[0]&nbsp;=&nbsp;'H';</pre>

crash?
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>

String constants
are
in fact
constant.
The compiler may
place them in nonwritable storage,
and it is therefore not safe to modify
them.

When you need writable strings,
you must allocate writable memory for them,
either by declaring an array,
or by calling <TT>malloc</TT>.
Try
<pre>
	char a[] = "hello, world!";
</pre>
</p><p>By the same argument,
a typical invocation of the old Unix <TT>mktemp</TT> routine
<pre>
	char *tmpfile = mktemp("/tmp/tmpXXXXXX");
</pre>
is nonportable;
the proper usage is
<pre>
	char tmpfile[] = "/tmp/tmpXXXXXX";
	mktemp(tmpfile);
</pre>
</p><p>See also question <a href="/~scs/cgi-bin/faqcat.cgi?sec=decl#strlitinit">1.32</a>.
</p>

<p>References:

ISO Sec. 6.1.4
<br>
H&amp;S Sec. 2.7.4 pp. 31-2
<hr><hr><hr>
<a name="ptralign">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/ptralign.html"><!-- qtag -->Question 16.7</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
I've got some code that's trying to unpack external structures, 
but it's crashing
with a message about an ``unaligned access.''
What does this mean?
The code looks like this:
<pre>
struct mystruct {
	char c;
	long int i32;
	int i16;
} s;

char buf[7], *p;
fread(buf, 7, 1, fp);
p = buf;
s.c = *p++;
s.i32 = *(long int *)p;
p += 4;
s.i16 = *(int *)p;
</pre>
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>
The problem is that you're playing too fast and loose with 
your

pointers.
Some machines require that data values be stored at 
appropriately aligned addresses.
For instance,
two-byte <TT>short&nbsp;int</TT>s
might be constrained to sit at even addresses,
and four-byte <TT>long&nbsp;int</TT>s at multiples of four.
(See also question <a href="/~scs/cgi-bin/faqcat.cgi?sec=struct#padding">2.12</a>.)
By converting a <TT>char&nbsp;*</TT>
(which can point to any byte)
to an <TT>int&nbsp;*</TT> or <TT>long&nbsp;int&nbsp;*</TT>,
and then indirecting

on it,
you
can end up
asking the
processor to
fetch a
multibyte
value from an unaligned
address,
which it isn't willing to do.
</p><p>A better way to unpack
external structures
is with code like

<pre>
	unsigned char *p = buf;

	s.c = *p++;

	s.i32 = (long)*p++ &lt;&lt; 24;
	s.i32 |= (long)*p++ &lt;&lt; 16;
	s.i32 |= (unsigned)(*p++ &lt;&lt; 8);
	s.i32 |= *p++;

	s.i16 = *p++ &lt;&lt; 8;
	s.i16 |= *p++;
</pre>
</p><p>This code
also gives you control over byte order.
(This example,
though,
assumes
that a <TT>char</TT> is 8 bits,
and that the <TT>long&nbsp;int</TT> and <TT>int</TT>
being unpacked from the ``external structure''
are 32 and 16 bits, respectively.)

See question <a href="/~scs/cgi-bin/faqcat.cgi?sec=stdio#extconform">12.42</a>
(which contains some similar code)
for a few explanations
and caveats.
</p><p>See also question <a href="/~scs/cgi-bin/faqcat.cgi?sec=ptrs#castincr">4.5</a>.
</p>


<p>References:

ISO Sec. 6.3.3.2, Sec. 6.3.4
<br>
H&amp;S Sec. 6.1.3 pp. 164-5
<hr><hr><hr>
<a name="segv">
<h1>
comp.lang.c FAQ list
<font color=blue>&middot;</font>
<a href="../strangeprob/segv.html"><!-- qtag -->Question 16.8</a>
</h1>
<p>
<font face=Helvetica size=8 color=blue><b>Q:</b></font>
What
do
``Segmentation violation'',
``Bus error'',
and
``General protection fault''
mean?
What's a ``core dump''?
</p><p><hr>
<p>
<font face=Helvetica size=8 color=blue><b>A:</b></font>

These
symptoms
(and
any similar messages
having to do with
memory access violations or protection faults)
generally
mean
that your program tried to access memory it shouldn't
have,

invariably
as a result of
stack corruption
or
improper pointer use.
Likely causes are:
<UL><li>overflow of local
(``automatic,'' stack-allocated)
arrays
<li>inadvertent use of null pointers
(see also questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=null#null2">5.2</a> and <a href="/~scs/cgi-bin/faqcat.cgi?sec=null#nullpassign">5.20</a>)
<li>uninitialized,
misaligned,
or otherwise
improperly allocated

pointers
(see
questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#malloc1">7.1</a>, <a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#malloc2">7.2</a>, and <a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#ptralign">16.7</a>)
<li>stale aliases to memory that has been relocated
(see question <a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#realloc">7.29</a>)
<li>corruption of the
<TT>malloc</TT> arena
(see question
<a href="/~scs/cgi-bin/faqcat.cgi?sec=malloc#crash">7.19</a>)
<li>attempts to modify read-only values
(those declared <TT>const</TT>,
and string literals--see question <a href="/~scs/cgi-bin/faqcat.cgi?sec=decl#strlitinit">1.32</a>)
<li>mismatched function arguments,
especially involving pointers;
two
possibilities are
<TT>scanf</TT>
(see question
<a href="/~scs/cgi-bin/faqcat.cgi?sec=stdio#scanf1">12.12</a>)
and



<TT>fprintf</TT>
(make sure it receives its first
<TT>FILE&nbsp;*</TT> argument)
</UL></p><p>Under Unix,
any of these problems almost invariably leads to
a ``core dump'':
a file
named <TT>core</TT>,
<a href="ferrite.html" rel=subdocument>[footnote]</a>
created in the current directory,
containing a memory image of the crashed process,
for debugging.
</p><p>The distinction between
``Bus error'' and ``Segmentation Violation''
may or may not be significant;
different versions of Unix generate these
signals
under different sets of circumstances.
Roughly speaking,
a segmentation violation
indicates an attempt to access memory which doesn't even exist,
and a bus error
indicates an attempt to access memory in an illegal way
(perhaps due to an unaligned pointer;
see question <a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#ptralign">16.7</a>).

</p><p>See also questions <a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#biglocal">16.3</a>
and
<a href="/~scs/cgi-bin/faqcat.cgi?sec=strangeprob#crashatexit">16.4</a>.
<hr><hr><hr>
<hr>
<p>
Read sequentially:
<a href="/~scs/cgi-bin/faqcat.cgi?sec=varargs" rev=precedes>prev</a>
<a href="/~scs/cgi-bin/faqcat.cgi?sec=style" rel=precedes>next</a>
<a href="/~scs/cgi-bin/faqcat.cgi" rev=subdocument>up</a>
</p>
<hr>
<p>
<br><!-- lastfooter -->
<a href="../about.html">about this FAQ list</a>
&nbsp;
<a href="../eskimo.html">about eskimo</a>
&nbsp;
<a href="../search.html">search</a>
&nbsp;
<a href="../feedback.html">feedback</a>
&nbsp;
<a href="copyright.html">copyright</a>
<p>
Hosted by
<a href="http://www.eskimo.com/"><img src="http://www.eskimo.com/img/link/eskitiny.gif" alt="Eskimo North"></a>
</body>
</html>
