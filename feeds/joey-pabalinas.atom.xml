<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joey Pabalinas — hello, i'm joey - Joey Pabalinas</title><link href="https://alyptik.org/" rel="alternate"></link><link href="https://alyptik.org/feeds/joey-pabalinas.atom.xml" rel="self"></link><id>https://alyptik.org/</id><updated>2018-06-02T08:17:00-10:00</updated><entry><title>gpg key</title><link href="https://alyptik.org/gpg-key.html" rel="alternate"></link><published>2018-06-02T08:17:00-10:00</published><updated>2018-06-02T08:17:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyptik.org,2018-06-02:/gpg-key.html</id><summary type="html">&lt;h2&gt;&lt;strong&gt;gpg public key:&lt;/strong&gt; &lt;code&gt;0x2e02d725af202dc1&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/joeypabalinas@gmail.com.asc"&gt;https://alyp.tk/joeypabalinas@gmail.com.asc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBFhVTp4BEACbENFr33xrIvq9HMq1lvt9B2WMqCkmZW85JbOs6eiQllC3Fy0V
pPt5lC/9+vwZe/i/Toa0RXWpVebOEoly2FyiBMO71A237vpBJRADe1tRRDaErFMZ
f2RZUDvAV0yiFH81ys5aut0vLrTwhNeu2fraDikxvTlE2xaqLT7VRh1gyHZ8MjxW
UdcnZfYndjZgK+PLEJ/SRjwgzxTutvZ3QjzTrvLWV/ccmmhdf8KmL0dxOP2JEkac
4egXW3AnbKTZ3303FuVYCIUukckL65CV2f3dJKYzZ9819DJgT59V8d0/NwjmnpzU
f/D3LovxqVi+5XXg9dZWA2cIsdai/DM1fJkDmYox5BkpArBq4b1spRI42hdHl9XE
mb14OMdps9ghmnsiH+ge+GuVlCUD1WoPdq171CvFYj9ZCh/Upv6gIh7R1Y2eygQe
QMUF5Fm2xU8z25FDmWKJpQuEVm5wkElsUhrRn3hlX62PT+Nr55RYWNCNdD1Ly9kM
+Dw4jUgIE3ZO7XM1zsnTbLKfcGvn3KQ3ZO9M5DIL+9XixGNgS3Ty8sjOmVWNoCt6
+rzLRm/Yz/FVT/NBQL2f+4ReO7OqOwRGBBAsXO4RcnDcM4NoJyPp3U5DD6fE58xb
GqxcWTmxEFH08MUbCCy40X0oN8vkY1pF/Wd3qQ8VdSCCNnXI7ChjxY1TXQARAQAB
tDpKb2V5IFBhYmFsaW5hcyAoaHR0cHM6Ly9hbHlwLnRrLykgPGFseXB0aWtAcHJv
dG9ubWFpbC5jb20 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;&lt;strong&gt;gpg public key:&lt;/strong&gt; &lt;code&gt;0x2e02d725af202dc1&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/joeypabalinas@gmail.com.asc"&gt;https://alyp.tk/joeypabalinas@gmail.com.asc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=hEXS
-----END PGP PUBLIC KEY BLOCK-----
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>abstractions will make your code sexy again</title><link href="https://alyptik.org/abstractions-will-make-your-code-sexy-again.html" rel="alternate"></link><published>2017-12-22T18:48:00-10:00</published><updated>2017-12-22T18:48:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyptik.org,2017-12-22:/abstractions-will-make-your-code-sexy-again.html</id><summary type="html">&lt;p&gt;Abstraction is everywhere these days. Functions are abstractions, types are abstractions, classes are abstractions, even programs and programming languages themselves are nothing but abstractions. Abstractions are really the whole foundation of computing not to mention most human achievements over the course of history, really. It is a great tool to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Abstraction is everywhere these days. Functions are abstractions, types are abstractions, classes are abstractions, even programs and programming languages themselves are nothing but abstractions. Abstractions are really the whole foundation of computing not to mention most human achievements over the course of history, really. It is a great tool to be able to get more work done with less effort, and some things are just impossible without it.  &lt;/p&gt;
&lt;p&gt;It follows that abstraction in programming is a beautiful thing; it is, however, also a fickle mistress. Too many levels of logical indirection will make your code bigger, your program slower, and worst of all, the entire project far more complex. Too little abstraction, though, is just as harmful, and ends up inflating your source code, obfuscating intent, and making your final product far more prone to bugs.  &lt;/p&gt;
&lt;p&gt;So it pays to follow one simple guideline which will help you find a place comfortably in middle:  &lt;/p&gt;
&lt;h3&gt;Only use abstractions that lower code complexity&lt;/h3&gt;
&lt;p&gt;Abstractions are a tool to reduce the number of things you have to keep track of. Use them, but never blindly. Note that code complexity is completely orthogonal to SLOC (Single Lines of Code). Even at the cost of extra verbosity, you should abstract away dense expressions.  &lt;/p&gt;
&lt;p&gt;An expression like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;copy_to_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_bits&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;may seem concise, but it will take most people an extra second or so to parse when compared to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_bits&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy_to_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, abstraction just as often reduces verbosity in addition to simplifying your code. A shining example is the use of helper functions and macros. For instance&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_len&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;be_raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MPIBYTES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;MPIBYTES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;may be a bit of an unreadable mess, but one which can easily be made far less confusing with a temporary helper macro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define COPY_TO_DER(value, length) \&lt;/span&gt;
&lt;span class="cp"&gt;        do { \&lt;/span&gt;
&lt;span class="cp"&gt;            memcpy(packet-&amp;gt;seckey.rsa.der_data + der_offset, (value), (length)); \&lt;/span&gt;
&lt;span class="cp"&gt;            der_offset += (length); \&lt;/span&gt;
&lt;span class="cp"&gt;        } while (0)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_len&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;be_raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MPIBYTES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#undef COPY_TO_DER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just remember the gold rule: Keep It Simple Stupid™. Hard to read code isn't fun. No one will want to work on your code if it takes a Herculean amount of effort just to mentally parse; not even you.&lt;/p&gt;</content></entry><entry><title>on simple code</title><link href="https://alyptik.org/on-simple-code.html" rel="alternate"></link><published>2017-12-08T19:13:00-10:00</published><updated>2017-12-08T19:13:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyptik.org,2017-12-08:/on-simple-code.html</id><summary type="html">&lt;p&gt;As I get older, I have started to notice how many of my childhood habits that I assumed had been useful and intelligent were in fact, horrible ones. All of these fancy words I had thought made me look smart, in actuality, often just made me seem like an egotistical …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I get older, I have started to notice how many of my childhood habits that I assumed had been useful and intelligent were in fact, horrible ones. All of these fancy words I had thought made me look smart, in actuality, often just made me seem like an egotistical show-off. At best they served only to confused the people I was trying to persuade, and at worst these ridiculous words ended up completely alienating them. Unsurprisingly, the same is true for code. Simple code is easier to maintain. Simple code is easier for you to understand later. Simple code is, to put it simply, better code.&lt;/p&gt;
&lt;h2&gt;Simple code is easier to maintain.&lt;/h2&gt;
&lt;p&gt;No matter your environment, unless you never, ever, plan to share your code with anyone else (boring!), the fact of the matter is that your code will at some point be someone else's problem. Maybe it's part of an open source project or maybe it's enterprise code, but regardless, at some point there will be someone else looking at and having to maintain your code. How will it reflect upon you if your code is horrible to dissect and understand, or if your code is full of ridiculous flourishes of programming one-liners that scream, "look at me, I know what a closure is and I'm not afraid to use it!"?&lt;/p&gt;
&lt;p&gt;Consider the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;7.949928895127363e-275&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;not_magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x0706050403020100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* assuming 64-bit doubles */&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;These are the same! %#.16lx == %#.16lx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;not_magic&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To solve some problem where you may happen to need the constant &lt;code&gt;0x0706050403020100&lt;/code&gt;, is it really necessary to use the &lt;code&gt;double&lt;/code&gt; version? Maybe you think the &lt;code&gt;double&lt;/code&gt; version makes you seem more intelligent, but really all it proves is that you are a show-off. Whenever you find yourself writing code that may look a bit obfuscated or questionably strange to others, you should always be asking yourself:  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;"Was there really anything gained by this?"&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;At the very least, add descriptive comments describing for the unsuspecting programming who must read your code explaining &lt;strong&gt;why&lt;/strong&gt; you had to inflict these atrocities upon them.&lt;/p&gt;
&lt;h2&gt;Simple code is easier for you to understand later.&lt;/h2&gt;
&lt;p&gt;You may be the smartest person in the world, but that doesn't change the fact that no matter how well you may understand your fancy spaghetti code now, you will definitely not understand it as well two months from now. Complicated code is just that; complicated. It requires, by definition, more cognitive attention to process, and yes, you may possess that degree of attention now, but will you later on when the code is no longer fresh in your mind? A better question: even if you will, would you want to have to spend that amount of attention on doing nothing more than understanding your own code?&lt;/p&gt;
&lt;p&gt;I am just as guilty of this sin as anyone else; one of the regular expressions used in a REPL project of mine (this is a bastard of a regex that I am still trying to figure out how to do away with sanely and still have my program behave the same way) is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;middle_regex&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;(^[[:blank:]]*|^[^,(){};&amp;amp;|&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;]+)&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;(struct|union|_?[Bb]ool|[rs]?size_t|u?int[0-9]+_t|ptrdiff_t|&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;intptr_t|intmax_t|uintmax_t|wchar_t|char[0-9]+_t|&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;char|double|float|int|long|short|unsigned|void)&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;[^,(){};&amp;amp;|&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;[:alpha:]]+[[:blank:]]*&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;**[[:blank:]]*&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;([[:alpha:]_][[:alnum:]_]*)[[:blank:]]*&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;([^,(){};&amp;amp;|&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;[:alnum:][:blank:]]+$|;*$|&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;[|,)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gross. Do you really think it's pragmatic to force that upon yourself a couple months down the road? I sure don't.&lt;/p&gt;
&lt;h2&gt;Simple code is, to put it simply, better code.&lt;/h2&gt;
&lt;p&gt;"Why should I bother making my code simpler?" Ironically, the answer is also quite simple.&lt;/p&gt;
&lt;h5&gt;The simpler your code is, the less bugs it has, the faster it runs, and overall, the better it works.&lt;/h5&gt;
&lt;p&gt;Complexity breeds pain, and you pay the cost in hours of debugging, in performance hits, and in an affront to your very sanity. A nice example of the opposite can be found in one of my favorite unit test frameworks, &lt;a href="https://github.com/zorgnax/libtap"&gt;libtap&lt;/a&gt;. The entire codebase is concise, descriptive, and to the point.&lt;/p&gt;
&lt;p&gt;One of my unit test files (modulo variable declarations) is nothing but:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;lives_ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;pipe_fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);},&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test living through pipe_fd() call with invalid fds.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;dies_ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);},&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;die passing a NULL pointer to compile().&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;succeed compiling program.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even for someone who doesn't know C, what is happening is so obvious it's almost criminal. The code has very obvious semantics, it does exactly what is expected of it, and it takes nearly zero effort to mentally parse.&lt;/p&gt;
&lt;p&gt;If you make the effort to strive towards writing code that takes as little effort to understand and maintain as is realistically possibly, you will may not notice anything meaningful at first. However, after just a little while, you &lt;strong&gt;will&lt;/strong&gt; find yourself pleasantly surprised at the net effect it has on your code.  &lt;/p&gt;
&lt;p&gt;Your code &lt;strong&gt;will&lt;/strong&gt; end up containing far fewer bugs.&lt;br&gt;
Yout code &lt;strong&gt;will&lt;/strong&gt; win you the affections of your managers and coworkers alike.&lt;br&gt;
And all-in-all, your code &lt;strong&gt;will&lt;/strong&gt; end up costing you far less of your sanity.&lt;/p&gt;</content></entry><entry><title>the magic of dispatch tables and dynamic arrays</title><link href="https://alyptik.org/the-magic-of-dispatch-tables-and-dynamic-arrays.html" rel="alternate"></link><published>2017-11-29T21:16:00-10:00</published><updated>2017-11-29T21:16:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyptik.org,2017-11-29:/the-magic-of-dispatch-tables-and-dynamic-arrays.html</id><summary type="html">&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; C. Quite simply, I find it an incredibly fun language to program in. Even through all the weird, little Heisenbugs, the segmentation faults, the incredibly confusing linker errors, it is still my favorite programming language by far. You will hear a lot of bad press about C:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“There …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; C. Quite simply, I find it an incredibly fun language to program in. Even through all the weird, little Heisenbugs, the segmentation faults, the incredibly confusing linker errors, it is still my favorite programming language by far. You will hear a lot of bad press about C:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“There is no memory safety!”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The typing system is dated and unreliable!”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;maybe even  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The language makes it far too easy to shoot yourself in the foot!”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And granted, these criticisms are not without merit. C is a old language; the origins of C take place around 1971, when &lt;em&gt;Dennis M. Ritchie&lt;/em&gt; of &lt;em&gt;Bell Labs&lt;/em&gt; rewrote B as a language named NB, which he eventually refined into C. However, in my opinion the greatest sins commonly committed by C programmers is the tendency to snob the features and inventions of other languages, dismissing potentially useful constructs with an attitude of it being the “easy way out,” even when there is a great productivity boon to be had. Two of these constructs are the dynamic array and the dispatch table, both common in modern, dynamically typed languages.  &lt;/p&gt;
&lt;p&gt;The dynamic array is the simpler of the two concepts, and the most ubiquitous:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# instantiate an array containing `1, 2, 3`&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw/1 2 3/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is a simple, contrived example of an array (or more pedantically, list,) of length 3 in Perl. Unlike C, if you want to change the length of the array, it would be as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# instantiate an array containing `1, 2, 3`&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw/1 2 3/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# append `4` and `5`&lt;/span&gt;
&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# pop `5` off the end&lt;/span&gt;
&lt;span class="nb"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# shift `1` off the beginning&lt;/span&gt;
&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# prepend `1`&lt;/span&gt;
&lt;span class="nb"&gt;unshift&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# prints `1, 2, 3, 4`&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you now have an array of length 4 containing &lt;code&gt;1, 2, 3, 4&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Easy, right? A dispatch table is a slightly more complex beast, but really not all that complicated either. A dispatch table is simply a table of functions which you can refer to by index to call:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Define the table using one anonymous code-ref and one named code-ref&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;bye&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;say_goodbye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;say_goodbye&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Fetch the code ref from the table, and invoke it&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$dispatch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$dispatch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bye&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will simply call the subroutines indexed by the entries “hi” and “bye”.  &lt;/p&gt;
&lt;p&gt;“Now this is all well and good, but this is Perl! I thought this post was about C?!” Ah, but it is! Although the code required to implement these constructs may not be quite the same, and a few semantics may be a bit different, it is indeed possible to implement these just as satisfactorily in C.  &lt;/p&gt;
&lt;p&gt;To implement a dynamic array data structure, since C is a statically typed language, you have to pick what kind of data this will be an array of. To keep things simple, I will be demonstrating using an &lt;code&gt;int&lt;/code&gt; lists but I have just as easily applied this same technique to string lists, &lt;code&gt;struct&lt;/code&gt; lists, and even &lt;code&gt;void *&lt;/code&gt; lists.  &lt;/p&gt;
&lt;p&gt;A simple implementation in C would look something like this:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(This code depends only on the standard library; you are encouraged to compile and try it out yourself)&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* struct definition for dynamic array */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* `size_t` members to keep track of current length and allocation size */&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* dynamically allocated array containing our data */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/* `malloc()` wrapper */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;xmalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* sanity check */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* allocate or die */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xrealloc()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* `calloc()` wrapper */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;xcalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nmemb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* sanity check */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* allocate or die */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nmemb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xcalloc()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* `realloc()` wrapper */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;xrealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* sanity check */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* allocate or die */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xrealloc()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* initilization of our dynamic array */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;array_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* initialize current length to `0` and current size to `1` */&lt;/span&gt;
    &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;xcalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;array_init()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* append an integer to our array */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;array_append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* increment length */&lt;/span&gt;
    &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* realloc if `cnt` reaches current size */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* check if size too large */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIZE_MAX&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* reallocate double current size */&lt;/span&gt;
        &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;xrealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;array_append()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cm"&gt;/* append the value */&lt;/span&gt;
    &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* declare a dynamic array and initialize it */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;array_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* append `0, 1, 2, 3, 4` */&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;array_append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* print out the values */&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s[%zu] = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dyn_arr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="cm"&gt;/* free our list now that we are done */&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This may seem like more code than necessary, and it may well be, but doing your implementation in this manner allows you to easily reuse your code; say when you decide you want a list of strings (&lt;code&gt;char *&lt;/code&gt;) instead of integers. All you have to do is a quick text substitution in a few places, and you have a fairly generic implementation that can be applied anywhere. In addition, since you allocate double the current size every time you call &lt;code&gt;realloc()&lt;/code&gt;, you end up with an “amortized” dynamic array, which, in simple terms, means that when you append a value you end up only paying the cost of reallocation every power-of-two array length.  &lt;/p&gt;
&lt;p&gt;The wrapping of the allocation functions allows to to simplify your error checking, while keeping the code around your allocations clean and uncluttered. Reducing the work you do may seem lazy, but in fact it is the best way to keep your code bug-free; the less chance you have of eliding important, though tedious, tasks such as check the return of &lt;code&gt;malloc()&lt;/code&gt;, the less chance of human error in general.  &lt;/p&gt;
&lt;p&gt;A dispatch table can also be implemented fairly easily in C using an array of function pointers. I recently used this data structure to vastly simplify the parsing of PGP packets, by have a dispatch table of constructor and destructor functions, which meant I could implement the parsing of a GnuPG key one packet at a time, and simply leave the other entries &lt;code&gt;NULL&lt;/code&gt; until I got around to implementing them. Here is simplified version of my implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(This snippet, unfortunately, is not compilable, but the full source can be found at &lt;a href="http://github.com/alyptik/derpgp"&gt;alyptik/derpgp&lt;/a&gt;)&lt;/strong&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* dispatch table forward declaration */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;size_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;dispatch_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* function prototypes */&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;parse_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;parse_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;free_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;free_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* dispatch each packet to a parser */&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;parse_pgp_packets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_LIST&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* dispatch each packet to parsers */&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* get the type of the packet */&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;packet_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TAGBITS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pheader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* use the type as an index into the table of function pointers */&lt;/span&gt;
        &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;parse_pkt&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dispatch_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;packet_type&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_pkt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;parse_pkt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* free list of packets */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;free_pgp_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_LIST&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* return if passed NULL pointers */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* get the type of the packet */&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;packet_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TAGBITS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pheader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* use the type as an index into the table of function pointers */&lt;/span&gt;
        &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;cleanup_pkt&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dispatch_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;packet_type&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cleanup_pkt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cleanup_pkt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* static function pointer array indexed by packet tag number */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;size_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;dispatch_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_RSRVD&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PKESESS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SIG&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SKESESS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_OPSIG&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SECKEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parse_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PUBKEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parse_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SECSUBKEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parse_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_CDATA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SEDATA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_MARKER&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_LITDATA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_TRUST&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_UID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PUBSUBKEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parse_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_UATTR&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SEIPDATA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_MDCODE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PRVT0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PRVT1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PRVT2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PRVT3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like that, I suddenly have a modular, reusable system for dispatching to the relevant constructor and destructor functions. I can implement them at whatever pace works for me, and leave the unimplemented entries &lt;code&gt;NULL&lt;/code&gt;. This allows a simple &lt;code&gt;if (ptr) {&lt;/code&gt; check inside of a &lt;code&gt;for&lt;/code&gt; loop to suffice for dispatching to all of the implemented functions in my table; safely, correctly, and most important of all, &lt;strong&gt;easily&lt;/strong&gt;. Keeping your code simple and too the point, decoupling and isolating as many part of your program as possible, and keeping an open mind are crucial if you want to keep you code maintainable by others as well as yourself.  &lt;/p&gt;
&lt;p&gt;Maybe you are an old, grizzled C veteran who cares not for all these fancy new languages, or maybe your aren't. Maybe C is a large part of your day-to-day career, or maybe you are just a C-hacker on the weekends. Regardless of your current relationship with C, it would be a grave mistake to ignore the innovations that other languages offer. It is an undisputed tautology that an open mind will always have an advantage over a closed one, and you will find that many useful data structures and algorithms from other programming languages are actually completely language-agnostic.  &lt;/p&gt;
&lt;p&gt;So give it a shot; who knows, learning a little Perl or Python may, in fact, end up being the best decision you ever made.&lt;/p&gt;</content></entry></feed>