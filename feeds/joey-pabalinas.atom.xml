<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joey Pabalinas — caveat lector. - Joey Pabalinas</title><link href="https://alyp.tk/" rel="alternate"></link><link href="https://alyp.tk/feeds/joey-pabalinas.atom.xml" rel="self"></link><id>https://alyp.tk/</id><updated>2018-05-05T22:16:00-10:00</updated><entry><title>hello whiskey, my old friend - pt.2</title><link href="https://alyp.tk/hello-whiskey-my-old-friend-pt2.html" rel="alternate"></link><published>2018-05-05T22:16:00-10:00</published><updated>2018-05-05T22:16:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2018-05-05:/hello-whiskey-my-old-friend-pt2.html</id><summary type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[pt.1] &lt;a href="https://theprose.com/post/28499/hello-whiskey-my-old-friend"&gt;https://theprose.com/post/28499/hello-whiskey-my-old-friend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hello whiskey, my old friend. Yes, yes it's really me. I know it's been quite a while. The words just don't quite come like they used to. It's maddening this world, isn't it? How-  &lt;/p&gt;
&lt;p&gt;Ah, yes I know. I'm an "adult" now …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[pt.1] &lt;a href="https://theprose.com/post/28499/hello-whiskey-my-old-friend"&gt;https://theprose.com/post/28499/hello-whiskey-my-old-friend&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hello whiskey, my old friend. Yes, yes it's really me. I know it's been quite a while. The words just don't quite come like they used to. It's maddening this world, isn't it? How-  &lt;/p&gt;
&lt;p&gt;Ah, yes I know. I'm an "adult" now, don't you know? Hah, it feels weird even just saying it. What does it matter if I still feel like I'm in high school, right? Twenty-seven years—ah what was the cliche—cold or some-  &lt;/p&gt;
&lt;p&gt;No, no, I am not sad, don't worry, bràthair. I am not stuck in some vertex of ennui, nor depressed nor anything like that. Maybe I don't talk as much as I used to. Maybe I don't quite find the same things funny I did a few years ago. Maybe I have noticed, little by little, that I'm not actually immune to humanity. I am, in fact, not some immortal Peter-Man-Pan-Can-Can't-If-Only-Haha!  &lt;/p&gt;
&lt;p&gt;Indeed, I'm actually quite satisfied with my life, broski. I am quite boring now, I admit that I don't go out much anymore.  &lt;/p&gt;
&lt;p&gt;No more of those crazy&lt;br&gt;
all night party holy damn&lt;br&gt;
wow why am I waking up in a&lt;br&gt;
bathtub that is full of blue&lt;br&gt;
Kool-aid but the girl I happen to&lt;br&gt;
like just asked me out ah shoot it&lt;br&gt;
really turns out she just was playing&lt;br&gt;
wing-lady to-oh-god-like I can remember&lt;br&gt;
anymore I'm way way way way way way way way way&lt;br&gt;
WaaaaaaaaaAAaAAAaAAAaAAaAAAAaAAAaaAAaaaAAaaAaayyyyyy&lt;br&gt;
WAY&lt;br&gt;
too drunk to—&lt;br&gt;
god life is great&lt;br&gt;
—nights.  &lt;/p&gt;
&lt;p&gt;Yes, old friend, haha, no more nights like those. I am trying my best to be an adult now, man stop, haha. I have to be proper, you know. I might land a job if I try hard enough, right? I mean, shoot, that's fair and life is always fair well maybe not but hey what happens happens, right? Maybe I was not the most motivated or the smartest or anything special or really even a little past where the ordinary overflowed somewhere a few years back or but I worked my ass off! Haha, I do-  &lt;/p&gt;
&lt;p&gt;Oh god I remember tha-  &lt;/p&gt;
&lt;p&gt;Ahaha! Man... where did the years go, huh?  &lt;/p&gt;
&lt;p&gt;Seems just yesterday I was some dumb-ass kid who didn't really care about anything. But now look at me, strange right? Sort sort of respectable, an adult-ish creature and I wouldn't be too ashamed at all if I were to die right now. I mean, there are holes and black spots in my soul I wouldn't dare poke, but so what? Being human is grey and you need a bit of black to get the colors just right. Oh man, do y-  &lt;/p&gt;
&lt;p&gt;Ah, no, no. No whiskey for me tonight. Yes, boring I know. No, really I-  &lt;/p&gt;
&lt;p&gt;No, no, it's not that at all, брат. It's not that I don't miss the fun times we had. Truly, it was great. Living free, the world was our oyster, RIGHT? But. Really, here I am realizing that no, no, the oyster wasn't an oyster at all but just a plastic bottle of something I don't even recognize or want at all anymore.  &lt;/p&gt;
&lt;p&gt;But, lets not dwell on that. I mean, here we are. Years. But alive we are, you and I, bracie. Glad-  &lt;/p&gt;
&lt;p&gt;Oh what's that? You met someo-  &lt;/p&gt;
&lt;p&gt;Wow, is that really the first thing you said to her?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How the stars were just pimples in the sky compares to her smile and how when you saw her face there could never be anyone else and that it would be perfect and passionate and rough and soft and how no no no we won't be like those other couples and no no no we are special and no no no you are indescribable and no no no though sometimes my words are sad and trite and cold but you couldn't mean them any harder because God when I see you I can no longer think straight and I stutter because you are beautiful, yet, you have insides fu-  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Haha, right, right. Sorry for rambling. Well, I am really glad for you. It seems like this time, you were right about all those things. That-  &lt;/p&gt;
&lt;p&gt;Wow, she really said &lt;em&gt;all&lt;/em&gt; that back to you?  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How you were her sun and moon that she would never love you to death only love you alive and that years later even after the terrible break up in some terrible dispute that horribly really was nothing at all that I will still love you quite terribly and how she would keeps all the boxes of birthday cards you handmade her and how she would always keep the box the you made her for the warm sad soul you said saw in hey and although she would never talk about it she still cared but creepy is creepy and love is patient and kind and angry and horrible and although  maybe she might forget for a few years and maybe the stuffed Pikachu will sit in the back of her closet she hasn't forgetten anything and that whatever we are now is what we are but she won't ever forget what we were.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;God, old friend. You two were made for each-other. Strange how Lady Luck is retired now. But here we are, frater. I do remember love like that. I do remember the end of love like that. But—water under the bridge—as they say, foxes and grapes and whatnot, you know what I mean. Seriously though teina, you lucked out you. I-  &lt;/p&gt;
&lt;p&gt;Ah. True.  &lt;/p&gt;
&lt;p&gt;Enough of that depressing talk right? I mean, here we are, right? We're alive. You and I somehow, through all of the crazy and all of the boring, yet we somehow haven't crossed our names off on some list in the heavens somewhere or some list in Avicii somewhere or just a grocery list forgotten about years ago or that we haven't ended up as cold, dead corpses; whoever we were, in the end we all end up with nothing but sh-  &lt;/p&gt;
&lt;p&gt;SHOOT, stubbed my toe. Ow, gah. Where was I? Ah, right...  &lt;/p&gt;
&lt;p&gt;in our pants. Caveat lector my bror, haha, sorry, this is what happens once I start talki-  &lt;/p&gt;
&lt;p&gt;Oh, what was that? I seem happier than last time? Well, I am! I-  &lt;/p&gt;
&lt;p&gt;Why?  &lt;/p&gt;
&lt;p&gt;Well, I guess that's a good question. But...  &lt;/p&gt;
&lt;p&gt;Why not?  &lt;/p&gt;
&lt;p&gt;I'm alive aren't I?  &lt;/p&gt;
&lt;p&gt;I have found something I am somewhat good at. Not amazing, but maybe one day if I try, who knows? I have a use, a purpose, a point! What more do I need? I am living every day like well God, if i died? I'd slap him on the back and say, "Thanks for the ride, G-man!" I don't drink much anymore, but I chain-smoke like a motherf-  &lt;/p&gt;
&lt;p&gt;Ah, yes yes, bad habit I know. I need some vice, though. Sanity and all?  &lt;/p&gt;
&lt;p&gt;Life's not some white, pure, get in get out perfect cupcake!&lt;br&gt;
Life's more like that slab of ribs, that one tequila too much but wow it was fun.&lt;br&gt;
Life's that water-slide that scared the living daylights out of you.&lt;br&gt;
Life's that messy first date where everything kinda sucked but everything was kind perfect.&lt;br&gt;
Life's a bunch of people and places and things and feeling and sounds and music.&lt;br&gt;
Life's a bunch of experiences and tears and joy and laughter and sadness and smiles.&lt;br&gt;
Life's a bunch of words and compliments and insults and laughs and love and songs.&lt;br&gt;
Life's a bunch of things no one can ever remember or forget and THAT'S-  &lt;/p&gt;
&lt;p&gt;Why it's so damned great.  &lt;/p&gt;
&lt;p&gt;Why do I wake up in the morning and go about my day? Because I damn well want to, of cour-  &lt;/p&gt;
&lt;p&gt;Haha, yes yes, I got a bit excited there, sorry about that.  &lt;/p&gt;
&lt;p&gt;I just feel like we haven't talked in a long time, is all.&lt;br&gt;
Maybe the last time was sad.&lt;br&gt;
Maybe I was a little bit pathetic.  &lt;/p&gt;
&lt;p&gt;But still, I'm glad I can still call you veli.&lt;br&gt;
Kazoku, like they say in Japan.&lt;br&gt;
C'est la vie. Bloody French.&lt;br&gt;
All those expressions in all those languages I don't actually know but—  &lt;/p&gt;
&lt;p&gt;the words...  &lt;/p&gt;
&lt;p&gt;—they make me feel something. Music without music.  &lt;/p&gt;
&lt;p&gt;Anyway, funny isn't it? Years later, here I sit.  &lt;/p&gt;
&lt;p&gt;Talking to whiskey and wine, just another madman who isn't really angry at all-  &lt;/p&gt;
&lt;p&gt;Ah yes, I remember last year. Our last conversation didn't end so well.  &lt;/p&gt;
&lt;p&gt;How distraught I was, surrounding by so much genius I couldn't be bothered to read.  &lt;/p&gt;
&lt;p&gt;"An Odyssey," I said. "An Iliad," I joked, hah. What was the rest? OH, I remember, "Too fu"-  &lt;/p&gt;
&lt;p&gt;No, no wait, let me stop you there. This isn't me anymore at all, tij laug. You know, after I while you realize no one needs any of those silly melodramatics at all.  &lt;/p&gt;
&lt;p&gt;Why?  &lt;/p&gt;
&lt;p&gt;Well, because life's not really so bad.  &lt;/p&gt;
&lt;p&gt;Why?  &lt;/p&gt;
&lt;p&gt;Well, maybe I feel a bit more boring. Hell, maybe I am a bit more boring, but deep down-  &lt;/p&gt;
&lt;p&gt;No no, DEEP down. Who am I deep down, 'bruder?  &lt;/p&gt;
&lt;p&gt;Am I still afraid of adventure? Not anymore. God, man, living is adventure!&lt;br&gt;
Huckleberry-Finn? Just a name!&lt;br&gt;
Hubris?&lt;br&gt;
Well, you talk about all these flowery word but what are they?&lt;br&gt;
What is hubris without a silly human, dueling Atlantis water pistol in hand, all-in with his life on the line?  &lt;/p&gt;
&lt;p&gt;Why?  &lt;/p&gt;
&lt;p&gt;What's the point in pettifog over the name of some car in some street?&lt;br&gt;
Desire? Desire is raw humanity. Desire is not something that belongs to rubber and steel and vinyl and glass.  &lt;/p&gt;
&lt;p&gt;Crime, punishment, these are for us, for the men and women, not mice nor pigs any animals on the whatever farm.&lt;br&gt;
I wasn't alive in 1984, and damned if I remember who Aesop even is anymore.  &lt;/p&gt;
&lt;p&gt;Names? Names are just words on paper and sounds on lips and they mean nothing without the thing behind it and—look
—God is a word in a book just like any other and Odin is a word as is Hades and Thor and all of them! All of them just words, sometimes ugly sometimes beautiful, but everyone forgets that so is Lot so is Ægir so is Andhrímni and cooks are a still lovers and cooks are still fighters and Lachesis will still judge your ass whether or not you remember how she &lt;em&gt;was&lt;/em&gt; fate itself and Hildebrand and Hadubrand who invented the cliffhanger, well dammit, they are as glorious as Hercules even if no one else thinks so.&lt;/p&gt;
&lt;p&gt;So here we sit, old hoa.  &lt;/p&gt;
&lt;p&gt;Why?  &lt;/p&gt;
&lt;p&gt;Well, maybe we realize that we are not all that shiny or exciting. Who cares if we end up another of Les Misérables? Don't you remember the ending? Jean Valjean died, as do we all. But-  &lt;/p&gt;
&lt;p&gt;Why? Why do I care?  &lt;/p&gt;
&lt;p&gt;Hah, your memory fails you, ախպեր. Glory and dramatics and action and all of this and all of that and if you don't have life is pointless and God-  &lt;/p&gt;
&lt;p&gt;What's wrong with &lt;em&gt;not&lt;/em&gt; wanting that?  &lt;/p&gt;
&lt;p&gt;Maybe, just maybe, it's not so horrid a mortal sin, so taboo a way of life, to just be me or you or whoever you are or want to be today. What's wrong with a bit of contentment? Life isn't action and gunfight and spies and orgies and car chases and cops and robbers and death and chaos. Life is dull and sharp. Life is alive.&lt;/p&gt;
&lt;p&gt;In the end, Jean Valjean died content, did he not?  &lt;/p&gt;
&lt;h6&gt;Why not live like that as well?&lt;/h6&gt;</content></entry><entry><title>abstractions will make your code sexy again</title><link href="https://alyp.tk/abstractions-will-make-your-code-sexy-again.html" rel="alternate"></link><published>2017-12-22T18:48:00-10:00</published><updated>2017-12-22T18:48:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-12-22:/abstractions-will-make-your-code-sexy-again.html</id><summary type="html">&lt;p&gt;Abstraction is everywhere these days. Functions are abstractions, types are abstractions, classes are abstractions, even programs and programming languages themselves are nothing but abstractions. Abstractions are really the whole foundation of computing not to mention most human achievements over the course of history, really. It is a great tool to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Abstraction is everywhere these days. Functions are abstractions, types are abstractions, classes are abstractions, even programs and programming languages themselves are nothing but abstractions. Abstractions are really the whole foundation of computing not to mention most human achievements over the course of history, really. It is a great tool to be able to get more work done with less effort, and some things are just impossible without it.  &lt;/p&gt;
&lt;p&gt;It follows that abstraction in programming is a beautiful thing; it is, however, also a fickle mistress. Too many levels of logical indirection will make your code bigger, your program slower, and worst of all, the entire project far more complex. Too little abstraction, though, is just as harmful, and ends up inflating your source code, obfuscating intent, and making your final product far more prone to bugs.  &lt;/p&gt;
&lt;p&gt;So it pays to follow one simple guideline which will help you find a place comfortably in middle:  &lt;/p&gt;
&lt;h3&gt;Only use abstractions that lower code complexity&lt;/h3&gt;
&lt;p&gt;Abstractions are a tool to reduce the number of things you have to keep track of. Use them, but never blindly. Note that code complexity is completely orthogonal to SLOC (Single Lines of Code). Even at the cost of extra verbosity, you should abstract away dense expressions.  &lt;/p&gt;
&lt;p&gt;An expression like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;copy_to_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_bits&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;may seem concise, but it will take most people an extra second or so to parse when compared to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_bits&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy_to_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, abstraction just as often reduces verbosity in addition to simplifying your code. A shining example is the use of helper functions and macros. For instance&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_len&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;be_raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;der_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MPIBYTES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;der_offset&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;MPIBYTES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;may be a bit of an unreadable mess, but one which can easily be made far less confusing with a temporary helper macro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define COPY_TO_DER(value, length) \&lt;/span&gt;
&lt;span class="cp"&gt;        do { \&lt;/span&gt;
&lt;span class="cp"&gt;            memcpy(packet-&amp;gt;seckey.rsa.der_data + der_offset, (value), (length)); \&lt;/span&gt;
&lt;span class="cp"&gt;            der_offset += (length); \&lt;/span&gt;
&lt;span class="cp"&gt;        } while (0)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;der_len&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_seq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="n"&gt;asn_int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;be_raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;COPY_TO_DER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MPIBYTES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;seckey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modulus_n&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#undef COPY_TO_DER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just remember the gold rule: Keep It Simple Stupid™. Hard to read code isn't fun. No one will want to work on your code if it takes a Herculean amount of effort just to mentally parse; not even you.&lt;/p&gt;</content></entry><entry><title>on simple code</title><link href="https://alyp.tk/on-simple-code.html" rel="alternate"></link><published>2017-12-08T19:13:00-10:00</published><updated>2017-12-08T19:13:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-12-08:/on-simple-code.html</id><summary type="html">&lt;p&gt;As I get older, I have started to notice how many of my childhood habits that I assumed had been useful and intelligent were in fact, horrible ones. All of these fancy words I had thought made me look smart, in actuality, often just made me seem like an egotistical …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I get older, I have started to notice how many of my childhood habits that I assumed had been useful and intelligent were in fact, horrible ones. All of these fancy words I had thought made me look smart, in actuality, often just made me seem like an egotistical show-off. At best they served only to confused the people I was trying to persuade, and at worst these ridiculous words ended up completely alienating them. Unsurprisingly, the same is true for code. Simple code is easier to maintain. Simple code is easier for you to understand later. Simple code is, to put it simply, better code.&lt;/p&gt;
&lt;h2&gt;Simple code is easier to maintain.&lt;/h2&gt;
&lt;p&gt;No matter your environment, unless you never, ever, plan to share your code with anyone else (boring!), the fact of the matter is that your code will at some point be someone else's problem. Maybe it's part of an open source project or maybe it's enterprise code, but regardless, at some point there will be someone else looking at and having to maintain your code. How will it reflect upon you if your code is horrible to dissect and understand, or if your code is full of ridiculous flourishes of programming one-liners that scream, "look at me, I know what a closure is and I'm not afraid to use it!"?&lt;/p&gt;
&lt;p&gt;Consider the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;7.949928895127363e-275&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;not_magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x0706050403020100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* assuming 64-bit doubles */&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;These are the same! %#.16lx == %#.16lx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;not_magic&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To solve some problem where you may happen to need the constant &lt;code&gt;0x0706050403020100&lt;/code&gt;, is it really necessary to use the &lt;code&gt;double&lt;/code&gt; version? Maybe you think the &lt;code&gt;double&lt;/code&gt; version makes you seem more intelligent, but really all it proves is that you are a show-off. Whenever you find yourself writing code that may look a bit obfuscated or questionably strange to others, you should always be asking yourself:  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;"Was there really anything gained by this?"&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;At the very least, add descriptive comments describing for the unsuspecting programming who must read your code explaining &lt;strong&gt;why&lt;/strong&gt; you had to inflict these atrocities upon them.&lt;/p&gt;
&lt;h2&gt;Simple code is easier for you to understand later.&lt;/h2&gt;
&lt;p&gt;You may be the smartest person in the world, but that doesn't change the fact that no matter how well you may understand your fancy spaghetti code now, you will definitely not understand it as well two months from now. Complicated code is just that; complicated. It requires, by definition, more cognitive attention to process, and yes, you may possess that degree of attention now, but will you later on when the code is no longer fresh in your mind? A better question: even if you will, would you want to have to spend that amount of attention on doing nothing more than understanding your own code?&lt;/p&gt;
&lt;p&gt;I am just as guilty of this sin as anyone else; one of the regular expressions used in a REPL project of mine (this is a bastard of a regex that I am still trying to figure out how to do away with sanely and still have my program behave the same way) is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;middle_regex&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;(^[[:blank:]]*|^[^,(){};&amp;amp;|&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;]+)&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;(struct|union|_?[Bb]ool|[rs]?size_t|u?int[0-9]+_t|ptrdiff_t|&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;intptr_t|intmax_t|uintmax_t|wchar_t|char[0-9]+_t|&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;char|double|float|int|long|short|unsigned|void)&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;[^,(){};&amp;amp;|&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;[:alpha:]]+[[:blank:]]*&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;**[[:blank:]]*&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;([[:alpha:]_][[:alnum:]_]*)[[:blank:]]*&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;([^,(){};&amp;amp;|&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;[:alnum:][:blank:]]+$|;*$|&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;[|,)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gross. Do you really think it's pragmatic to force that upon yourself a couple months down the road? I sure don't.&lt;/p&gt;
&lt;h2&gt;Simple code is, to put it simply, better code.&lt;/h2&gt;
&lt;p&gt;"Why should I bother making my code simpler?" Ironically, the answer is also quite simple.&lt;/p&gt;
&lt;h5&gt;The simpler your code is, the less bugs it has, the faster it runs, and overall, the better it works.&lt;/h5&gt;
&lt;p&gt;Complexity breeds pain, and you pay the cost in hours of debugging, in performance hits, and in an affront to your very sanity. A nice example of the opposite can be found in one of my favorite unit test frameworks, &lt;a href="https://github.com/zorgnax/libtap"&gt;libtap&lt;/a&gt;. The entire codebase is concise, descriptive, and to the point.&lt;/p&gt;
&lt;p&gt;One of my unit test files (modulo variable declarations) is nothing but:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;lives_ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;pipe_fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);},&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test living through pipe_fd() call with invalid fds.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;dies_ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);},&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;die passing a NULL pointer to compile().&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;succeed compiling program.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even for someone who doesn't know C, what is happening is so obvious it's almost criminal. The code has very obvious semantics, it does exactly what is expected of it, and it takes nearly zero effort to mentally parse.&lt;/p&gt;
&lt;p&gt;If you make the effort to strive towards writing code that takes as little effort to understand and maintain as is realistically possibly, you will may not notice anything meaningful at first. However, after just a little while, you &lt;strong&gt;will&lt;/strong&gt; find yourself pleasantly surprised at the net effect it has on your code.  &lt;/p&gt;
&lt;p&gt;Your code &lt;strong&gt;will&lt;/strong&gt; end up containing far fewer bugs.&lt;br&gt;
Yout code &lt;strong&gt;will&lt;/strong&gt; win you the affections of your managers and coworkers alike.&lt;br&gt;
And all-in-all, your code &lt;strong&gt;will&lt;/strong&gt; end up costing you far less of your sanity.&lt;/p&gt;</content></entry><entry><title>the magic of dispatch tables and dynamic arrays</title><link href="https://alyp.tk/the-magic-of-dispatch-tables-and-dynamic-arrays.html" rel="alternate"></link><published>2017-11-29T21:16:00-10:00</published><updated>2017-11-29T21:16:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-11-29:/the-magic-of-dispatch-tables-and-dynamic-arrays.html</id><summary type="html">&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; C. Quite simply, I find it an incredibly fun language to program in. Even through all the weird, little Heisenbugs, the segmentation faults, the incredibly confusing linker errors, it is still my favorite programming language by far. You will hear a lot of bad press about C:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“There …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; C. Quite simply, I find it an incredibly fun language to program in. Even through all the weird, little Heisenbugs, the segmentation faults, the incredibly confusing linker errors, it is still my favorite programming language by far. You will hear a lot of bad press about C:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“There is no memory safety!”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The typing system is dated and unreliable!”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;maybe even  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The language makes it far too easy to shoot yourself in the foot!”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And granted, these criticisms are not without merit. C is a old language; the origins of C take place around 1971, when &lt;em&gt;Dennis M. Ritchie&lt;/em&gt; of &lt;em&gt;Bell Labs&lt;/em&gt; rewrote B as a language named NB, which he eventually refined into C. However, in my opinion the greatest sins commonly committed by C programmers is the tendency to snob the features and inventions of other languages, dismissing potentially useful constructs with an attitude of it being the “easy way out,” even when there is a great productivity boon to be had. Two of these constructs are the dynamic array and the dispatch table, both common in modern, dynamically typed languages.  &lt;/p&gt;
&lt;p&gt;The dynamic array is the simpler of the two concepts, and the most ubiquitous:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# instantiate an array containing `1, 2, 3`&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw/1 2 3/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is a simple, contrived example of an array (or more pedantically, list,) of length 3 in Perl. Unlike C, if you want to change the length of the array, it would be as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# instantiate an array containing `1, 2, 3`&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw/1 2 3/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# append `4` and `5`&lt;/span&gt;
&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# pop `5` off the end&lt;/span&gt;
&lt;span class="nb"&gt;pop&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# shift `1` off the beginning&lt;/span&gt;
&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# prepend `1`&lt;/span&gt;
&lt;span class="nb"&gt;unshift&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# prints `1, 2, 3, 4`&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you now have an array of length 4 containing &lt;code&gt;1, 2, 3, 4&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Easy, right? A dispatch table is a slightly more complex beast, but really not all that complicated either. A dispatch table is simply a table of functions which you can refer to by index to call:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Define the table using one anonymous code-ref and one named code-ref&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;bye&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;say_goodbye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;say_goodbye&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;goodbye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Fetch the code ref from the table, and invoke it&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$dispatch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$dispatch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bye&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will simply call the subroutines indexed by the entries “hi” and “bye”.  &lt;/p&gt;
&lt;p&gt;“Now this is all well and good, but this is Perl! I thought this post was about C?!” Ah, but it is! Although the code required to implement these constructs may not be quite the same, and a few semantics may be a bit different, it is indeed possible to implement these just as satisfactorily in C.  &lt;/p&gt;
&lt;p&gt;To implement a dynamic array data structure, since C is a statically typed language, you have to pick what kind of data this will be an array of. To keep things simple, I will be demonstrating using an &lt;code&gt;int&lt;/code&gt; lists but I have just as easily applied this same technique to string lists, &lt;code&gt;struct&lt;/code&gt; lists, and even &lt;code&gt;void *&lt;/code&gt; lists.  &lt;/p&gt;
&lt;p&gt;A simple implementation in C would look something like this:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(This code depends only on the standard library; you are encouraged to compile and try it out yourself)&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* struct definition for dynamic array */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* `size_t` members to keep track of current length and allocation size */&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* dynamically allocated array containing our data */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/* `malloc()` wrapper */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;xmalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* sanity check */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* allocate or die */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xrealloc()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* `calloc()` wrapper */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;xcalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nmemb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* sanity check */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* allocate or die */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nmemb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xcalloc()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* `realloc()` wrapper */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;xrealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* sanity check */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* allocate or die */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xrealloc()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* initilization of our dynamic array */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;array_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* initialize current length to `0` and current size to `1` */&lt;/span&gt;
    &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;xcalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;array_init()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* append an integer to our array */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;array_append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* increment length */&lt;/span&gt;
    &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* realloc if `cnt` reaches current size */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* check if size too large */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIZE_MAX&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* reallocate double current size */&lt;/span&gt;
        &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;xrealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;array_append()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cm"&gt;/* append the value */&lt;/span&gt;
    &lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;list_struct&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* declare a dynamic array and initialize it */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;int_list&lt;/span&gt; &lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;array_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* append `0, 1, 2, 3, 4` */&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;array_append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* print out the values */&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s[%zu] = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dyn_arr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="cm"&gt;/* free our list now that we are done */&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dyn_arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This may seem like more code than necessary, and it may well be, but doing your implementation in this manner allows you to easily reuse your code; say when you decide you want a list of strings (&lt;code&gt;char *&lt;/code&gt;) instead of integers. All you have to do is a quick text substitution in a few places, and you have a fairly generic implementation that can be applied anywhere. In addition, since you allocate double the current size every time you call &lt;code&gt;realloc()&lt;/code&gt;, you end up with an “amortized” dynamic array, which, in simple terms, means that when you append a value you end up only paying the cost of reallocation every power-of-two array length.  &lt;/p&gt;
&lt;p&gt;The wrapping of the allocation functions allows to to simplify your error checking, while keeping the code around your allocations clean and uncluttered. Reducing the work you do may seem lazy, but in fact it is the best way to keep your code bug-free; the less chance you have of eliding important, though tedious, tasks such as check the return of &lt;code&gt;malloc()&lt;/code&gt;, the less chance of human error in general.  &lt;/p&gt;
&lt;p&gt;A dispatch table can also be implemented fairly easily in C using an array of function pointers. I recently used this data structure to vastly simplify the parsing of PGP packets, by have a dispatch table of constructor and destructor functions, which meant I could implement the parsing of a GnuPG key one packet at a time, and simply leave the other entries &lt;code&gt;NULL&lt;/code&gt; until I got around to implementing them. Here is simplified version of my implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(This snippet, unfortunately, is not compilable, but the full source can be found at &lt;a href="http://github.com/alyptik/derpgp"&gt;alyptik/derpgp&lt;/a&gt;)&lt;/strong&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* dispatch table forward declaration */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;size_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;dispatch_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* function prototypes */&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;parse_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;parse_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;free_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;free_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* dispatch each packet to a parser */&lt;/span&gt;
&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;parse_pgp_packets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_LIST&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* dispatch each packet to parsers */&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* get the type of the packet */&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;packet_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TAGBITS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pheader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* use the type as an index into the table of function pointers */&lt;/span&gt;
        &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;parse_pkt&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dispatch_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;packet_type&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_pkt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;parse_pkt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* free list of packets */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;free_pgp_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PGP_LIST&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* return if passed NULL pointers */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* get the type of the packet */&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;packet_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TAGBITS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pheader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cm"&gt;/* use the type as an index into the table of function pointers */&lt;/span&gt;
        &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;cleanup_pkt&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dispatch_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;packet_type&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cleanup_pkt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cleanup_pkt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pkts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* static function pointer array indexed by packet tag number */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;size_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;dispatch_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])(&lt;/span&gt;&lt;span class="n"&gt;PGP_PACKET&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="kr"&gt;restrict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_RSRVD&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PKESESS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SIG&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SKESESS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_OPSIG&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SECKEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parse_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PUBKEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parse_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SECSUBKEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parse_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_seckey_packet&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_CDATA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SEDATA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_MARKER&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_LITDATA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_TRUST&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_UID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PUBSUBKEY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;parse_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;free_pubkey_packet&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_UATTR&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_SEIPDATA&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_MDCODE&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PRVT0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PRVT1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PRVT2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TAG_PRVT3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like that, I suddenly have a modular, reusable system for dispatching to the relevant constructor and destructor functions. I can implement them at whatever pace works for me, and leave the unimplemented entries &lt;code&gt;NULL&lt;/code&gt;. This allows a simple &lt;code&gt;if (ptr) {&lt;/code&gt; check inside of a &lt;code&gt;for&lt;/code&gt; loop to suffice for dispatching to all of the implemented functions in my table; safely, correctly, and most important of all, &lt;strong&gt;easily&lt;/strong&gt;. Keeping your code simple and too the point, decoupling and isolating as many part of your program as possible, and keeping an open mind are crucial if you want to keep you code maintainable by others as well as yourself.  &lt;/p&gt;
&lt;p&gt;Maybe you are an old, grizzled C veteran who cares not for all these fancy new languages, or maybe your aren't. Maybe C is a large part of your day-to-day career, or maybe you are just a C-hacker on the weekends. Regardless of your current relationship with C, it would be a grave mistake to ignore the innovations that other languages offer. It is an undisputed tautology that an open mind will always have an advantage over a closed one, and you will find that many useful data structures and algorithms from other programming languages are actually completely language-agnostic.  &lt;/p&gt;
&lt;p&gt;So give it a shot; who knows, learning a little Perl or Python may, in fact, end up being the best decision you ever made.&lt;/p&gt;</content></entry><entry><title>on dreams</title><link href="https://alyp.tk/on-dreams.html" rel="alternate"></link><published>2017-08-23T22:43:00-10:00</published><updated>2017-08-23T22:43:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-08-23:/on-dreams.html</id><summary type="html">&lt;!-- ![dreams]({filename}/images/dreams.png) --&gt;

&lt;p&gt;So why do I want to be a programmer? Why do I want to work in software development? Why do I want to spend hours in gdb trying to figure out why my program is segfaulting? Why do I want to spend most of the day reading manpages to figure …&lt;/p&gt;</summary><content type="html">&lt;!-- ![dreams]({filename}/images/dreams.png) --&gt;

&lt;p&gt;So why do I want to be a programmer? Why do I want to work in software development? Why do I want to spend hours in gdb trying to figure out why my program is segfaulting? Why do I want to spend most of the day reading manpages to figure out library function prototypes? Why do I want to make it nearly a certainty that I will end up with an RSI later in life; some sort of typing related horror that will probably make daily task incredibly annoying?&lt;/p&gt;
&lt;p&gt;Well, the short and simple answer is &lt;strong&gt;because it's fun&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It's a joy hacking away at code, dereferencing pointers with reckless abandon, clobbering registers for the fun of it, coming up with ridiculously hacky solutions to problems that would make most normal people swoon.&lt;/p&gt;
&lt;p&gt;It's really something I love.&lt;/p&gt;
&lt;p&gt;So what makes a good programmer? The answer varies depending on who you ask of course, but ask the grizzled veterans, the ones who used to hack away on TX-01s between classes and build telephone relays to thwart service provider fees, you'll start to see the answers sort of converge; I've eventually learned that these are the ones that warrant your full, undivided attention.&lt;/p&gt;
&lt;p&gt;Programming is hard. There's no ifs, ands, or buts about it, and really it is not some sort of thing you can do half-heartedly. Attention to detail is incredibly important. You need to be willing to put the work in; when you have a problem you can't solve no matter how hard you throw your brain pan at it, you can't just check stack overflow and copy-paste some snippet call you a programmer. Well, you can, but eventually, your hubris will catch up with you. You'll find yourself stuck way in over your head, and end up quitting and becoming a lumberjack or something.&lt;/p&gt;
&lt;p&gt;No, you have to actually want to know the “why”. The internet is great, answers to nearly any problem are right your fingertips, but just using someone else's work and calling it a day will eventually come back to bite you. Googling is fine and dandy, encouraged even, but you have to try to understand “why” this is the solution. By doing so, you not only are bettering your craft, you are building towards something far more important: A foundation for your entire programming career.&lt;/p&gt;
&lt;p&gt;Knowing how some tiny, useless snippet works under-the-hood, say the reason why:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;prints out &lt;code&gt;'o'&lt;/code&gt; may seem useless and unimportant; who would ever need to use something like this in production? But as it turns out, this is a brick in the house you are building. Because you are aware that array indexing is just pointer math:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;when you come across some weirdo problem like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}};&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you are then able to realize you are doing array indexing, and it's the same as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}};&lt;/span&gt;
&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you end up with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;without having to sort through any incredibly ugly pointer math.&lt;/p&gt;
&lt;p&gt;Now having technical know-how isn't at all the only thing you need to be any good at programming; in fact, it's not even the most important trait to have. Above all, the thing that makes or breaks you is humility. You need to be humble, a person who understands that “I am probably am not some super-prodigy one-in-a-million chosen-by-god programmer who knows everything.” Having the courage to admit that “I probably need to seek out help” every now and then is incontrovertibly the most important characteristic to have; it truly is what defines a professional programmer.&lt;/p&gt;
&lt;p&gt;And to be humble, as simple as it may seem, is NOT easy.&lt;/p&gt;
&lt;p&gt;So what are my long-term aspirations? I have no clue. I haven't fully planned out my life apart from a general direction I have pointed myself in, and I don't really feel a pressing need to do so. I just want to be happy, spending my days hacking away at projects that tickle my fancy, creating programs others find useful; everyone wants to make some sort of mark on the world after all.&lt;/p&gt;
&lt;p&gt;I do want to be good at my craft, and I will not pretend I am without sin; the sins I have gone over I am guilty of committing far more than a few times. I will not apologize for being human. But I am earnestly working at it. In the end, if I were to ask myself: “Where am I going? What is it I really want to be in this unimaginably huge sea of possibilities?” Well, at this point, the only answer I can give right now would be a simple one, maybe one that would be considered a bit corny by most, but it would be something given in surety:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I just want to be a human being worth a damn.&lt;/em&gt;&lt;/p&gt;</content></entry><entry><title>license and patents and stallman, oh my!</title><link href="https://alyp.tk/license-and-patents-and-stallman-oh-my.html" rel="alternate"></link><published>2017-08-08T20:25:00-10:00</published><updated>2017-08-08T20:25:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-08-08:/license-and-patents-and-stallman-oh-my.html</id><summary type="html">&lt;!-- ![gpl]({filename}/images/gpl.jpg) --&gt;

&lt;p&gt;I love Linux and open source software to death. Anyone who has moved from
Windows or Mac to this unassuming open source operating system knows exactly
why: freedom.&lt;/p&gt;
&lt;p&gt;“Oh hey, I need to make a Powerpoint, but I don't actually own Microsoft
Office… Oh wait, I am on Linux and …&lt;/p&gt;</summary><content type="html">&lt;!-- ![gpl]({filename}/images/gpl.jpg) --&gt;

&lt;p&gt;I love Linux and open source software to death. Anyone who has moved from
Windows or Mac to this unassuming open source operating system knows exactly
why: freedom.&lt;/p&gt;
&lt;p&gt;“Oh hey, I need to make a Powerpoint, but I don't actually own Microsoft
Office… Oh wait, I am on Linux and can just search my distribution repositories
for an office suite!”&lt;/p&gt;
&lt;p&gt;“Egads, I need to calculate the boolean matrix product of these two truth
tables! Oh wait, I can just feed the data into /bin/genius!”&lt;/p&gt;
&lt;p&gt;The sheer power that Linux and open source software puts at your fingertips
can be staggering at times. But to quote dear, old Uncle Ben, "With great power
comes great responsibility.”&lt;/p&gt;
&lt;p&gt;Just like anything else, open source has its flaws. Having your code available
free-of-charge to whomever cares enough to looks for it means that you can't
rely on having “special” un-duplicatable features as the driving force
behind your profit margin. Another company can easily just look for your
code and copy it. This is the nature of the beast itself, and many companies
have worked around it by selling support or other sorts of services that cannot
be duplicated.&lt;/p&gt;
&lt;p&gt;However, a very heated debate is, and has been, raging in the world of open
source; licensing. And one of the most controversial licensing debated is
regarding the GPL.&lt;/p&gt;
&lt;p&gt;For those of you who don't know, GPL stand for the GNU Public License. It is
one of, if not THE most, ubiquitous licenses currently being used is the world
of open source. Now the crusade of the GPL is, I personally believe, a noble
one. The creator of the GPL, Richard M. Stallman states,&lt;/p&gt;
&lt;p&gt;“The simplest way to make a program free software is to put it in the public
domain, uncopyrighted. This allows people to share the program and their
improvements, if they are so minded. But it also allows uncooperative people
to convert the program into proprietary software. They can make changes, many
or few, and distribute the result as a proprietary product. People who receive
the program in that modified form do not have the freedom that the original
author gave them; the middleman has stripped it away.”&lt;/p&gt;
&lt;p&gt;People of course, will be people; give an inch, they'll take a mile, etc. I
do personally believe the GPL has done wonders for the entire industry, and one
could argue, the world. But the latest revision of the GPL, dubbed GPLv3, is not
one I personally feel comfortable using by default.&lt;/p&gt;
&lt;p&gt;The GPLv2 is, in my opinion, a wonderful document. It very simply states that
you may use this source code free-of-charge, as long you propogate your changes
upstream. Of course these are a few more intricacies to this, as is always the
case when dealing with legalities, but this is the general gist of it. You, as
the software developer, can understand this easily, without having to spend
hours worrying about what exactly your responsibilities are when using this
code.&lt;/p&gt;
&lt;p&gt;There are no patent clauses to worry about, no subtleties about what you are
required to do with the end product itself, just simple terms that are part of
a simple license. The GPLv3 on the other hand, is a far more complex beast.&lt;/p&gt;
&lt;p&gt;I honestly have yet to meet a software developer who has confidently asserted
to me that they understand the GPLv3; what use is a license which is so complex
that none of the people it was designed to protect understand it? And with this
uncertainty comes hesitance to adopt, splitting the community into those who
use it and those who despise it.&lt;/p&gt;
&lt;p&gt;This is made even worse by the fact that the GPL, by nature, is what is
unadoringly refered to as a “viral” license. In short, this means that if your
product uses code that is GPL, even if it is simply linking against a shared
library such as the ubiquitous GNU readline, you are forced to license your
entire product under the GPL.&lt;/p&gt;
&lt;p&gt;As you can imagine, developers are not jumping for joy at the fact that they
may very realistically have to license they entire project under something
as all encompassing as the GPL.&lt;/p&gt;
&lt;p&gt;Linux itself is license under the GPLv2. Linux Torvalds, the creator of the
Linux kernel, states:&lt;/p&gt;
&lt;p&gt;“For example, the GPLv2 in no way limits your use of the software. If you're a
mad scientist, you can use GPLv2'd software for your evil plans to take over
the world ("Sharks with lasers on their heads!!"), and the GPLv2 just says
that you have to give source code back. And that's OK by me. I like sharks
with lasers. I just want the mad scientists of the world to pay me back in
kind. I made source code available to them, they have to make their changes
to it available to me. After that, they can fry me with their shark-mounted
lasers all they want.”&lt;/p&gt;
&lt;p&gt;“[GPL] version 3 was not a good "here we give you version 2" and then we try
to sneak in this new rules and try force everyone to upgrade; that was the
part I disliked. The FSF did really sneaky stuff, downright immoral in my
opinion.”&lt;/p&gt;
&lt;p&gt;Just doing the research for this post itself was horrible in and of itself;
trying to figure out the GPLv3 patent clause just about drove me mad. I had to
eventually give in and bug one of my lawyer buddies to give it a good read-over
before I finally understood that the patent clause, thankfully was the soft one,
where it only applied to patent lawsuit related to that software, instead of a
hard one such as the one that Apple uses which states that you cannot file ANY
patent claims whatsoever; included ones completely unrelated to the project
itself.&lt;/p&gt;
&lt;p&gt;So I have to petition the reader to ask him or herself: “Is all of this
complexity and unnecessary madness really worth it?” When companies would
rather pass over your code for something else instead of work with you due to
the fact that it is GPLv3, is this really benefiting the open-source community?
When you are FORCED to use a specific license just because you link against
something that is essential to any programs in that specific field of
programming, can you really say that this is what freedom tastes like?&lt;/p&gt;
&lt;p&gt;I won't, and can't, force you to have an opinion on these issues; at the end of
the day however, if I've persuaded you to think about simpler, yet vastly
important questions like these, then I can sleep soundly, knowing my job here
is done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sources:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://lwn.net/Articles/200422/"&gt;Kernel developers' position on GPLv3.&lt;/a&gt; (2006, September 22). Retrieved August 11, 2017, from https://lwn.net/Articles/200422&lt;br&gt;
&lt;a href="https://youtu.be/PaKIZ7gJlRU"&gt;Linus Torvalds says GPL v3 violates everything that GPLv2 stood for.&lt;/a&gt; (2014, September 04). Retrieved August 11, 2017, from https://youtu.be/PaKIZ7gJlRU&lt;br&gt;
&lt;a href="http://www.informationweek.com/the-torvalds-transcript-why-i-absolutely-love-gpl-version-2/d/d-id/1053128?"&gt;The Torvalds Transcript: Why I 'Absolutely Love' GPL Version 2.&lt;/a&gt; (2007, March 19). Retrieved August 11, 2017, from http://www.informationweek.com/the-torvalds-transcript-why-i-absolutely-love-gpl-version-2/d/d-id/1053128  &lt;/p&gt;</content></entry><entry><title>just fucking do it already</title><link href="https://alyp.tk/just-fucking-do-it-already.html" rel="alternate"></link><published>2017-07-26T00:38:00-10:00</published><updated>2017-07-26T00:38:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-07-26:/just-fucking-do-it-already.html</id><summary type="html">&lt;!-- ![justfuckingdoitalready]({filename}/images/justfuckingdoitalready.png) --&gt;

&lt;p&gt;I don't usually like being around other people. I don't usually care
much for interacting with other people. For a long time, I sort of told myself
it was because I happened to be some sort of weirdo misanthrope, but after a
while I realized that I didn't actually hate …&lt;/p&gt;</summary><content type="html">&lt;!-- ![justfuckingdoitalready]({filename}/images/justfuckingdoitalready.png) --&gt;

&lt;p&gt;I don't usually like being around other people. I don't usually care
much for interacting with other people. For a long time, I sort of told myself
it was because I happened to be some sort of weirdo misanthrope, but after a
while I realized that I didn't actually hate anyone (in fact at the time I
found myself growing rather fond of a few select people) and that it was more
that the presence of this nagging, unshakable annoyance with the things you
have to keep track of, the things that you have to watch for, the things
that you have to BE when interacting with other human beings, that all of
this was just completely and absolutely tiring.&lt;/p&gt;
&lt;p&gt;I hear people say things like, “there are people in this world who
prefer solitude, but there is no one who can withstand it,” as if being around
around other people is some sort of important prerequisite for existing; as if
it's something that you would die without, and this sort of assertion confuses
me greatly. Maybe I'm fucked in the head or something because I feel the
complete opposite. Being around others tires me greatly; having to empathize
with what they happen to be saying at that very moment, having to keep
track of what's socially acceptable, keeping in mind what is the “normal”
response to this arbitrary conversational fragment, what I should be doing
with my hands, my arms, my fucking feet while I am juggling these thoughts,
even what fucking facial expressions are appropriate to wear at this time,
this arbitrary moment, and after all of this repeat. If only god were merciful,
but sadly, there is no jump to coda here.&lt;/p&gt;
&lt;p&gt;To be quite honest, it's absolutely baffling to me how other people DON'T find
all of this ridiculously tiring.&lt;/p&gt;
&lt;p&gt;Yes, yes, I know it's a part of life. Yeah, yeah, I know I'm speaking
against the sun here. It's not like I'm expecting any of this to change; I
realize this is a part of being human and shit; I need to deal with it. It's
just one of those things in life you are never gonna enjoy but you have to
do anyway. One of those time you have to be a fucking adult, suck it up,
and deal with it.&lt;/p&gt;
&lt;p&gt;So I do.&lt;/p&gt;
&lt;p&gt;I have a problem I have to deal with.
I have something I have to do in order deal with this particular problem.
I do it.&lt;/p&gt;
&lt;p&gt;Ok. Wham Bam, Thank You, Maam.&lt;/p&gt;
&lt;p&gt;I mean, it makes sense right? You have a problem, you figure out how
to fix the problem, and you fucking fix it. Simple, right? I've probably
thought about this far more than would be deemed sane, and I've come to
the fairly quotidian conclusion that this simple, succinct method is the
best way to solve problems.&lt;/p&gt;
&lt;p&gt;To me, it's obvious as fuck.&lt;/p&gt;
&lt;p&gt;But to my surprise, this sort of thinking is fairly unique. I try my best to
keep an open mind about things I don't know shit about, so it is highly
probable that I'm just one weird fuck. Maybe for other people, this kind of
thinking is anything but trivial. Maybe this sort of approach is actually the
alien one; thus I don't want to make any unnecessary judgements.&lt;/p&gt;
&lt;p&gt;So instead, I will just do my best to appeal to you:&lt;/p&gt;
&lt;p&gt;Please, for the fucking love of god, just do it already.&lt;/p&gt;
&lt;p&gt;Go make that beautiful sculpture.
Go paint the next Mona Lisa.
Go out and apply for that fucking job.
Go travel the world.&lt;/p&gt;
&lt;p&gt;Go kayaking,
go mountain climbing,
go bobsledding,
go hiking,
go scuba diving,
go backpacking,
go motherfucking sky diving already, jesus.&lt;/p&gt;
&lt;p&gt;Go build that fucking car you keep bitching about.
Go on that date with that girl you can't shut up about.
Go program the next open-source operating system.
Go build that monster stereo system,
go find a baby seal and adopt it,
go distill the whiskey of your dreams,
go learn to surf,
go eat a taco for the first time,
go start a clothing line,
go become the world's best light-bulb engineer,
go fucking do the thing you keep talking about doing;&lt;/p&gt;
&lt;p&gt;just fucking go.&lt;/p&gt;
&lt;p&gt;Maybe it's easier for me because I am some sort of weird fuck-up who
has no idea how to interact with real human beings, but that doesn't change the
fact that you are doing nothing but hurting yourself by sitting there, stagnant,
griping about the things that you “will” do, yet never doing them. So please,
for the love of god, do yourself a favor. Take that thing you keep talking
about and go fucking do it. Please. I promise it won't end up as bad as you
think it will. Yeah, you may fail a few times. Yeah, it may suck. But think of
it this way:&lt;/p&gt;
&lt;p&gt;afterwards,
when all is said and done,
when you've given it the old college-go,
that maybe,
just maybe,
you may just happen to discover that,
shit,&lt;/p&gt;
&lt;p&gt;it was worth it.&lt;/p&gt;</content></entry><entry><title>on being a fucking adult</title><link href="https://alyp.tk/on-being-a-fucking-adult.html" rel="alternate"></link><published>2017-07-02T20:06:00-10:00</published><updated>2017-07-02T20:06:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-07-02:/on-being-a-fucking-adult.html</id><summary type="html">&lt;!-- ![onbeingafuckingadult]({filename}/images/onbeingafuckingadult.png) --&gt;

&lt;p&gt;for me personally, prose is the thing i was born to. prose is the thing i
could do drunk off my ass in the middle of the night. prose is the thing i
could never seem to fuck up as completely as everything else in my life.&lt;/p&gt;
&lt;p&gt;but it's easy …&lt;/p&gt;</summary><content type="html">&lt;!-- ![onbeingafuckingadult]({filename}/images/onbeingafuckingadult.png) --&gt;

&lt;p&gt;for me personally, prose is the thing i was born to. prose is the thing i
could do drunk off my ass in the middle of the night. prose is the thing i
could never seem to fuck up as completely as everything else in my life.&lt;/p&gt;
&lt;p&gt;but it's easy to drink all day, typing silly little poems about nothing
particularly important. it's easy to ramble on about ambiguous metaphors or
imagined slights. so i guess i thought i'd try writing something a little
more down to earth. something a little less trite. something a little more
sober. maybe it'll suck. maybe it won't.&lt;/p&gt;
&lt;p&gt;you hear that expression everywhere: "walk a mile in some else's shoes";
you've probably even repeated it one or two times yourself. but that idiom
pisses me off. i believe the author of this statement itself meant well,
yet missed the entire point: do you really need to go through the same
experiences as someone else before you are able to empathize with them?&lt;/p&gt;
&lt;p&gt;there's no possible way that you'll ever go through all, or even a significant
portion, of the experiences of just one of the myriad people you'll meet over
the course of your life. there's no way you'll be able to walk even a few feet
in another person's shoes, let alone an entire mile. so what am i getting at
here; am i saying empathy is pointless?&lt;/p&gt;
&lt;p&gt;of course not.&lt;/p&gt;
&lt;p&gt;empathy is by far the trait i consider the most important in regard to other
people. shit; it's by far the trait that i consider the most important in
regard to myself.&lt;/p&gt;
&lt;p&gt;i find the thought that you need to share someone's experiences before you
can understand someone's feelings completely maddening. i find the assumption
that you need to feel what someone feels before you can empathize with what
they feel absolutely absurd. yes, i agree it never hurts to know what it
feels like to be in someone else's shoes, but knowing how someone else is
feeling should never, ever be a prerequisite for taking it upon yourself to
understand how someone else is feeling.&lt;/p&gt;
&lt;p&gt;ever.&lt;/p&gt;</content></entry><entry><title>on hubris</title><link href="https://alyp.tk/on-hubris.html" rel="alternate"></link><published>2017-06-20T14:07:00-10:00</published><updated>2017-06-20T14:07:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-06-20:/on-hubris.html</id><summary type="html">&lt;p&gt;&lt;em&gt;a quick disclaimer:&lt;/em&gt; i am fairly young with regard to the open-source
movement, and i suppose i am also fairly young with regard to falling
out of a vagina one could argue, so keep in mind that there is a non-zero
chance that the following could just be me prancing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;a quick disclaimer:&lt;/em&gt; i am fairly young with regard to the open-source
movement, and i suppose i am also fairly young with regard to falling
out of a vagina one could argue, so keep in mind that there is a non-zero
chance that the following could just be me prancing about with some very empty
opinions that are very full of shit. so now that that's out of the way, i'll
carry on.&lt;/p&gt;
&lt;p&gt;now don't get me wrong here; i love the sweet ba-jeezus out of open-source
and everything it happens to stand for. my life was never quite the same after
i moved to linux full-time, and the quality of software that is available
freely still surprises me at times (though that also applies to the shit-side of
the quality spectrum.) the almost anarchistic belief in freedom that bleeds
from nearly every orifice of the open-source movement is well-intentioned at
worst, and downright valiant at best.&lt;/p&gt;
&lt;p&gt;but, and it is a very large but, the community, like any group of like-minded
people collectively invested in something, does have its failings.&lt;/p&gt;
&lt;p&gt;it's subtle as fuck; unless you are deeply invested yourself in some open-source
project or group of heavy open-source users it's unlikely to be noticeable at
all. but if you are, it's inevitable that you'll start to feel stifled by a
general miasma of half-elitism/half-hubris.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;let he who is without sin, eh?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;but alas, i admit to being just as guilty of both of these things; a few times
you do wind up having the wisdom to back it up, but most other times you are
just fallaciously assuming that you do.&lt;/p&gt;
&lt;p&gt;&lt;img alt="knowledge" src="https://alyp.tk/images/knowledge.jpg"&gt;&lt;/p&gt;
&lt;p&gt;of course, we don't need another blog crying about how the sun should be
rising in the west and setting in the east. a thing as abstract as hubris is
intransigent by its very nature: humanity, good/evil, ???, meretricious
philosophy, etc. i am mostly just expressing my slight curiosity about my
day to day happenstances, maybe even tossing a hail-mary or two
guessing at the "why?"&lt;/p&gt;
&lt;p&gt;it is possible that the whole "free" business is a large part of it. of course
it is true that not all open-source software is free, the vast majority of it
unequivocally is. i mean people are competitive by nature. people want to be
the best, be the richest, or be the most liked. i would even venture to say that
is a large portion of what it means to be human. so we're no longer strutting
about trying to make the most money; instead, it's about being the smartest
fuck in the room.&lt;/p&gt;
&lt;p&gt;because let's face it; we all have some motivation for bothering to do the
things we do. we need one. otherwise why bother even waking up in the morning?
have a motive is not a bad thing at all, and neither is the commendable goal to
want to be the smartest fuck in the room. great! now i can WAIT OH SHIT—&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;turns out being smart is fucking hard.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;and then something interesting happens: turns out if you stick 20 people in a
room and have them debate some random rhetorical topic, the person who seems
the smartest is quite often simply the most confident; being the smartest is
helps of course, but it is not required at all. as they say: empty vessels
often make the most noise.&lt;/p&gt;
&lt;p&gt;so now you have 19 people and 1 really confident dude who the group has
subconsciously picked as the smartest. the ironic part is that it's also
very likely the &lt;em&gt;actual&lt;/em&gt; smartest person in the room is now second guessing
him/herself. lorem ipsum; the cycle continues.&lt;/p&gt;
&lt;p&gt;the point i am trying to make here is a plea to please refrain from being just
another aimless sheeple who takes everyone and all arguments at face value.
you don't have to be a dick or an ungrateful sack of shit, (it's still possible
after all that they actually ARE the smartest person in the room,) but do
verify on your own time before accepting shit as fact.&lt;/p&gt;
&lt;p&gt;it quickly starts to get easier to tell who is full of shit, (easier to tell
when you yourself are full of shit as well,) and you start to find your own
little ways to speed up checking out the accuracy of some arbitrary information
or look up some random reference fact.&lt;/p&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;don't be a fucking sheep. don't be an ungrateful dick. admit to yourself that
the possibility that at times you don't know shit. have the courage to recognize
those times that you &lt;em&gt;do&lt;/em&gt; know shit. trust sparingly, doubt gratuitously,
and don't take shit so seriously; &lt;em&gt;especially&lt;/em&gt; yourself.&lt;/p&gt;</content></entry><entry><title>irc silliness</title><link href="https://alyp.tk/irc-silliness.html" rel="alternate"></link><published>2017-05-21T23:11:00-10:00</published><updated>2017-05-21T23:11:00-10:00</updated><author><name>Joey Pabalinas</name></author><id>tag:alyp.tk,2017-05-21:/irc-silliness.html</id><summary type="html">&lt;p&gt;just jelly's joey
&lt;img alt="ayyy" src="https://alyp.tk/images/pineapple.png"&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;just jelly's joey
&lt;img alt="ayyy" src="https://alyp.tk/images/pineapple.png"&gt;&lt;/p&gt;</content></entry></feed>